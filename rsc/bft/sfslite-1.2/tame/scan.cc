
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 140
#define YY_END_OF_BUFFER 141
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[418] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  141,  120,  121,  122,
      123,  120,  120,   43,    2,    1,   27,   42,   29,   43,
       43,   25,   25,   27,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   26,   46,    2,   44,   46,

       45,   56,    2,   56,   55,  101,  101,  100,  106,  107,
      101,  101,  101,  101,  101,  102,  116,  136,  137,  136,
      136,  127,  124,  127,  127,  115,    5,    2,    5,    4,
        4,    3,    7,    2,    7,    6,    6,   41,   49,   48,
       50,   54,   49,  140,   49,   47,   62,    2,   61,   63,
       64,   62,   66,   65,   60,    2,   57,   59,   58,   92,
       92,   91,   96,   97,   92,   92,   92,   93,   99,   98,
       86,    2,   85,   88,   87,   86,   89,   90,    2,   84,
       83,  140,   82,  132,  130,  132,  131,   80,   81,   78,
       80,   79,   77,   76,   75,   68,    2,   68,   67,   74,

       73,   70,   69,   71,   72,   35,   33,   32,   34,   39,
       37,   38,   40,   36,   30,   31,  109,  111,  110,  112,
      114,  113,  120,  118,  117,    0,    0,    2,   25,   25,
      139,  138,    0,   28,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  101,
        0,    0,    0,    0,  136,  135,    0,  127,  126,  125,
        0,    4,    4,    0,    3,    6,    6,    0,   49,   62,
        2,   92,    0,    0,   86,    2,   82,  132,   80,   74,
       33,   39,  109,  109,  112,  112,    0,    0,   25,   24,
       24,   24,   24,   24,   14,   24,   24,   24,   24,   24,

       24,   24,   24,   24,    0,    0,    0,    0,    0,    0,
        0,    4,    6,    0,    0,    0,    0,   12,   24,   24,
       24,   24,   16,   24,   24,   24,   24,   24,   24,   24,
       11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    8,   24,   17,   24,    0,   13,   24,
       24,   24,   24,   24,   24,    0,    0,    0,    0,    0,
        0,    0,    0,   94,    0,  119,  108,   18,   24,    0,
       19,   21,    9,   24,   24,   24,    0,    0,    0,    0,
        0,  103,    0,    0,    0,   22,    0,   24,   24,   24,
        0,    0,    0,   53,  105,    0,  134,    0,  129,   95,

        0,   23,   10,   20,    0,   52,   51,  133,  128,   15,
        0,    0,    0,    0,    0,  104,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    5,    6,    7,
        8,    9,   10,   11,   10,    1,   12,   13,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
        1,   18,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   25,   26,   25,   25,   27,   28,   29,   30,   25,
       25,   31,   25,   32,   33,   25,   25,   25,   25,   25,
       34,   35,   36,    1,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   25,   25,   47,   48,   49,
       50,   51,   25,   52,   53,   54,   55,   56,   57,   58,
       59,   25,   60,    1,   61,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[62] =
    {   0,
        1,    2,    3,    4,    1,    5,    6,    6,    7,    1,
        8,    9,   10,   10,    1,   11,   12,   12,   10,   10,
       10,   13,   10,   10,   14,   14,   14,   14,   14,   14,
       14,   15,   14,   16,   17,   18,   19,   10,   10,   10,
       10,   10,   10,   20,   14,   14,   14,   14,   14,   14,
       14,   21,   14,   22,   14,   14,   14,   14,   14,   23,
       23
    } ;

static yyconst flex_int16_t yy_base[460] =
    {   0,
        0,    4,   58,    0,  118,  120,  126,  131,  190,  250,
        2,    6,   10,   11,  310,  370,  431,  492,   15,   17,
      117,  119,  128,  134,  147,  192,   33,   44,  155,  203,
      166,  206,  229,  234,  257,  294,  268,  317,  328,  341,
      553,  614,   21,  136,  213,  271,  347,  354,  185,  255,
      157,  204,  231,  281,  172,  358,  360,  376,  381,  383,
      360,  395,   22,  141,   15,  150, 1327,    0, 1538, 1538,
     1538,  135,  163, 1538, 1323, 1538, 1538, 1538, 1538,   35,
      276,  392,  313, 1307,    0,  153, 1265, 1267, 1255, 1253,
     1249,  350,  292, 1243, 1241, 1538, 1538, 1288, 1538,  399,

     1538, 1538, 1284,  400, 1538,    0, 1538, 1538, 1538, 1538,
      401, 1262, 1238, 1221,  358, 1538, 1538,    0, 1538, 1240,
     1225,    0, 1538,  407, 1221, 1538, 1538, 1234,  404,  412,
      414,    0, 1538, 1228,  438,  455,  440, 1538,    0, 1538,
     1538, 1538,  447, 1538, 1189, 1538,    0, 1220, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1219, 1538, 1538, 1538,    0,
     1538, 1538, 1538, 1538,  448, 1170, 1177, 1538, 1538, 1538,
        0, 1211, 1538, 1538, 1538,  449, 1538, 1538, 1210, 1538,
     1538,  462,    0,    0, 1538,  463, 1538,    0, 1538, 1538,
      464, 1538, 1538, 1538, 1538, 1538, 1209,  468, 1538,    0,

     1538, 1538, 1538, 1538, 1538, 1538, 1205, 1538, 1538,    0,
     1538, 1538, 1538, 1538, 1538, 1538,    0, 1538, 1202,    0,
     1538, 1197,    0, 1538, 1538, 1142, 1148, 1183,  465,  449,
     1538, 1538,    0, 1538,    0, 1146,  624,  617,  621,  623,
      615,  619,  617,  622,    1,  617,  613,  610,  616,    0,
      637,  457,  606,  621,    0, 1538,  630,    0,    0,    0,
      629,  472,  469,    0,    0,  474,  476,    0,    0,    0,
      654,    0,  601,  600,    0,  651,    0,    0,    0,    0,
      650,    0,    0, 1538,    0, 1538,  609,  601, 1538,  594,
      592,  605,  605,  601,    0,  597,  588,  590,  584,  582,

      585,  593,  588,  592,  593,  585,  193,  555,  557,  585,
      584, 1538, 1538,  556,  550,  563,  549,    0,  548,  554,
      546,  543,  596,  543,  554,  549,  554,  546,  543,  546,
        0,  553,  558,  555,  562,  530,  528,  543,  542,  509,
      526,  512,  531,    0,  534,    0,  537,  246,    0,  533,
      533,  518,  513,  510,  497,  510,  502,  498,  479,  415,
      517,  399,  393, 1538,  372, 1538, 1538,    0,  345,  341,
        0,    0,    0,  335,  339,  327,  324,  308,  300,  296,
      533, 1538,  279,  356,  515,    0,  274,  279,  257,  236,
      231,  218,  206, 1538, 1538,  215, 1538,  206, 1538, 1538,

      177,    0,    0,    0,  159, 1538, 1538, 1538, 1538, 1538,
      158,  140,  128,  118,    3, 1538, 1538,  675,  698,  721,
      744,  767,  790,  813,  836,  859,  882,  905,  928,  951,
      974,  997, 1020, 1043, 1066, 1089, 1112, 1135, 1158, 1181,
     1195, 1217, 1237, 1260, 1274, 1296, 1319, 1342, 1364, 1378,
     1400, 1423, 1446, 1468, 1491, 1514,  529,  531,  537
    } ;

static yyconst flex_int16_t yy_def[460] =
    {   0,
      418,  418,  417,    3,  419,  419,  420,  420,  421,  421,
      422,  422,  423,  423,  421,  421,  424,  424,  425,  425,
        3,    3,  426,  426,  426,  426,  427,  427,  427,  427,
      428,  428,  429,  429,  429,  429,  430,  430,  430,  430,
      431,  431,  432,  432,  433,  433,  433,  433,  434,  434,
      435,  435,  435,  435,  436,  436,  437,  437,  437,  437,
        3,    3,  438,  438,  439,  439,  417,  440,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  417,  417,  417,  417,  417,

      417,  417,  417,  417,  417,  442,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  443,  417,  417,
      417,  444,  417,  444,  417,  417,  417,  417,  417,  417,
      417,  445,  417,  417,  417,  417,  417,  417,  446,  417,
      417,  417,  417,  417,  417,  417,  447,  447,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  448,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      449,  449,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  450,  451,  417,  417,  417,  452,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  453,

      417,  417,  417,  417,  417,  417,  417,  417,  417,  454,
      417,  417,  417,  417,  417,  417,  455,  417,  417,  456,
      417,  417,  440,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  457,  417,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  442,
      417,  417,  417,  417,  443,  417,  417,  444,  444,  444,
      417,  417,  417,  458,  445,  417,  417,  459,  446,  447,
      447,  448,  417,  417,  449,  449,  450,  451,  452,  453,
      417,  454,  455,  417,  456,  417,  417,  417,  417,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  441,  441,  441,  441,  417,  441,  441,
      441,  441,  441,  441,  441,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  441,  441,  417,
      441,  441,  441,  441,  441,  441,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  441,  417,  441,  441,  441,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,

      417,  441,  441,  441,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,    0,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417
    } ;

static yyconst flex_int16_t yy_nxt[1600] =
    {   0,
      417,  417,   69,   70,  119,   71,   69,   70,  119,   71,
      120,   72,  123,  123,  120,   72,  134,   76,  134,   76,
      221,  124,  124,  185,  135,  218,  135,  136,  137,  136,
      137,  416,  186,  121,  148,   76,  187,  121,  299,  149,
      150,  125,  125,  151,  152,  148,   76,  229,  230,  222,
      149,  150,  300,   73,  151,  152,  219,   73,   74,   75,
       76,   74,   77,   74,   78,   79,   77,   80,   77,   81,
       82,   83,   84,   77,   77,   77,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   74,   74,   74,   85,   85,   85,   86,   87,   85,

       88,   85,   89,   90,   91,   85,   85,   85,   85,   85,
       92,   93,   94,   95,   85,   85,   85,   78,   96,   98,
       76,   98,   76,  138,   99,  138,   99,  103,   76,  100,
      140,  100,  103,   76,  141,  142,  140,  104,  185,  143,
      141,  142,  104,  224,  218,  143,  225,  186,  415,  140,
      138,  187,  138,  141,  146,  221,  148,   76,  143,  201,
      414,  149,  153,  144,  145,  154,  152,  156,   76,  144,
      145,  413,  157,  207,  208,  219,   74,  101,   74,  101,
      412,  158,  146,  145,  222,  105,  197,   76,  209,  411,
      105,  107,  108,  109,  140,  110,  198,  236,  141,  146,

      226,  111,  237,  143,  148,   76,  201,  156,   76,  149,
      153,  112,  157,  154,  152,  189,  202,  203,  334,  227,
      410,  158,  335,  190,  191,  159,  113,  146,  145,  409,
      161,  162,  163,  201,  164,  161,  162,  163,  408,  164,
      165,  114,  407,  115,  199,  165,  192,  348,  193,  116,
      117,  107,  108,  109,  406,  110,  197,   76,  161,  162,
      163,  111,  164,  202,  203,  159,  198,  405,  165,  172,
       76,  112,  166,  189,  173,  174,  404,  166,  175,  176,
      167,  190,  191,  201,  231,  167,  113,  232,  168,  169,
      204,  205,  370,  168,  169,  161,  162,  163,  403,  164,

      166,  114,  396,  115,  192,  165,  193,  397,  167,  116,
      117,  107,  108,  109,  199,  110,  168,  170,  172,   76,
      402,  111,  401,  173,  174,  230,  230,  175,  176,  172,
       76,  112,  394,  246,  173,  177,  393,  166,  178,  176,
      204,  205,  172,   76,  392,  167,  113,  173,  177,  189,
      247,  178,  176,  168,  170,  391,  189,  194,  191,  207,
      208,  114,  211,  115,  194,  191,  215,  215,  390,  116,
      126,  107,  108,  109,  209,  110,  212,  213,  211,  398,
      192,  111,  195,  211,  399,  211,  389,  192,  388,  195,
      387,  112,  212,  213,  243,  244,  386,  212,  214,  212,

      214,  215,  215,  245,  230,  230,  113,  231,  231,  224,
      232,  232,  225,  254,  227,  259,  262,  263,  260,  216,
      385,  114,  384,  115,  263,  263,  263,  263,  383,  116,
      126,  127,  128,   76,  127,  127,  127,  127,  127,  127,
      129,  127,  127,  130,  131,  127,  127,  127,  127,  233,
      266,  267,  267,  267,  216,  231,  231,  231,  232,  232,
      232,  230,  230,  381,  127,  127,  127,  267,  267,  264,
      231,  231,  231,  232,  232,  232,  231,  230,  230,  232,
      306,  263,  263,  307,  263,  263,  267,  267,  267,  267,
      127,  127,  127,  128,   76,  127,  127,  127,  127,  127,

      127,  129,  127,  127,  130,  131,  127,  127,  127,  127,
      364,  364,  268,  366,  366,  380,  400,  400,  382,  382,
      379,  400,  233,  366,  378,  127,  127,  127,  382,  264,
      400,  268,  367,  367,  395,  395,  377,  367,  289,  395,
      312,  289,  367,  312,  395,  376,  313,  375,  395,  313,
      374,  127,  127,  144,  179,   76,  144,  144,  144,  144,
      180,  144,  144,  181,  182,  144,  144,  144,  144,  144,
      144,  373,  372,  371,  369,  368,  382,  365,  363,  362,
      361,  360,  359,  358,  357,  356,  144,  144,  144,  355,
      367,  354,  353,  352,  351,  350,  349,  348,  347,  346,

      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      333,  332,  144,  144,  144,  179,   76,  144,  144,  144,
      144,  180,  144,  144,  181,  182,  144,  144,  144,  144,
      144,  144,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  144,  144,  144,
      316,  281,  276,  315,  314,  271,  311,  310,  309,  308,
      305,  304,  303,  302,  301,  298,  297,  296,  295,  294,
      293,  292,  291,  144,  144,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   97,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  223,  223,  290,  228,  288,  223,  223,  223,  287,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  286,  223,  235,  284,  281,  235,  235,  235,
      228,  228,  276,  235,  235,  235,  235,  250,  274,  273,
      228,  271,  250,  250,  250,  252,  250,  250,  250,  228,
      250,  250,  250,  250,  250,  228,  250,  255,  255,  261,
      255,  255,  255,  257,  255,  255,  255,  255,  255,  255,
      255,  256,  255,  255,  255,  255,  255,  255,  255,  255,
      258,  258,  253,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  252,  258,  258,  258,  258,  258,
      258,  258,  258,  265,  251,  228,  265,  265,  265,  228,
      249,  248,  265,  265,  265,  265,  269,  269,  242,  269,

      269,  241,  269,  269,  240,  269,  269,  269,  269,  269,
      269,  269,  269,  239,  238,  269,  269,  269,  269,  270,
      270,  234,  270,  270,  228,  270,  417,  417,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  272,  417,  417,  417,  417,  272,  272,  272,
      417,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  417,  417,  272,  275,  275,  417,  275,  275,  417,
      275,  417,  417,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  277,  417,  417,
      277,  277,  277,  417,  417,  417,  277,  277,  277,  277,

      278,  278,  417,  278,  278,  278,  278,  278,  417,  278,
      417,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  279,  279,  417,  279,  279,  279,  279,
      417,  417,  279,  279,  279,  279,  279,  279,  417,  279,
      417,  279,  279,  279,  279,  279,  280,  280,  417,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  282,  282,
      417,  282,  282,  282,  282,  282,  282,  282,  282,  417,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  283,  283,  283,  417,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  417,  283,  283,
      283,  283,  283,  283,  285,  285,  285,  285,  417,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      417,  285,  285,  285,  285,  285,  285,   67,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417

    } ;

static yyconst flex_int16_t yy_chk[1600] =
    {   0,
        0,    0,    1,    1,   11,    1,    2,    2,   12,    2,
       11,    1,   13,   14,   12,    2,   19,   19,   20,   20,
       65,   13,   14,   43,   19,   63,   20,   19,   19,   20,
       20,  415,   43,   11,   27,   27,   43,   12,  245,   27,
       27,   13,   14,   27,   27,   28,   28,   80,   80,   65,
       28,   28,  245,    1,   28,   28,   63,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        5,    6,    6,   21,    5,   22,    6,    7,    7,    5,
       23,    6,    8,    8,   23,   23,   24,    7,   44,   23,
       24,   24,    8,   72,   64,   24,   72,   44,  414,   25,
       21,   44,   22,   25,   25,   66,   29,   29,   25,   51,
      413,   29,   29,   23,   23,   29,   29,   31,   31,   24,
       24,  412,   31,   55,   55,   64,   21,    5,   22,    6,
      411,   31,   25,   25,   66,    7,   49,   49,   55,  405,
        8,    9,    9,    9,   26,    9,   49,   86,   26,   26,

       73,    9,   86,   26,   30,   30,   52,   32,   32,   30,
       30,    9,   32,   30,   30,   45,   51,   51,  307,   73,
      401,   32,  307,   45,   45,   31,    9,   26,   26,  398,
       33,   33,   33,   53,   33,   34,   34,   34,  396,   34,
       33,    9,  393,    9,   49,   34,   45,  348,   45,    9,
        9,   10,   10,   10,  392,   10,   50,   50,   35,   35,
       35,   10,   35,   52,   52,   32,   50,  391,   35,   37,
       37,   10,   33,   46,   37,   37,  390,   34,   37,   37,
       33,   46,   46,   54,   81,   34,   10,   81,   33,   33,
       53,   53,  348,   34,   34,   36,   36,   36,  389,   36,

       35,   10,  383,   10,   46,   36,   46,  383,   35,   10,
       10,   15,   15,   15,   50,   15,   35,   35,   38,   38,
      388,   15,  387,   38,   38,   83,   83,   38,   38,   39,
       39,   15,  380,   93,   39,   39,  379,   36,   39,   39,
       54,   54,   40,   40,  378,   36,   15,   40,   40,   47,
       93,   40,   40,   36,   36,  377,   48,   47,   47,   56,
       56,   15,   57,   15,   48,   48,   61,   61,  376,   15,
       15,   16,   16,   16,   56,   16,   57,   57,   58,  384,
       47,   16,   47,   59,  384,   60,  375,   48,  374,   48,
      370,   16,   58,   58,   92,   92,  369,   59,   59,   60,

       60,   62,   62,   92,   82,   82,   16,  100,  104,  111,
      100,  104,  111,  115,  115,  124,  129,  129,  124,   61,
      365,   16,  363,   16,  130,  130,  131,  131,  362,   16,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   82,
      135,  135,  137,  137,   62,  143,  165,  176,  143,  165,
      176,  230,  230,  360,   17,   17,   17,  136,  136,  130,
      182,  186,  191,  182,  186,  191,  198,  229,  229,  198,
      252,  263,  263,  252,  262,  262,  266,  266,  267,  267,
       17,   17,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
      340,  340,  136,  342,  342,  359,  385,  385,  361,  361,
      358,  385,  229,  342,  357,   18,   18,   18,  361,  262,
      385,  266,  343,  343,  381,  381,  356,  343,  457,  381,
      458,  457,  343,  458,  381,  355,  459,  354,  381,  459,
      353,   18,   18,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,  352,  351,  350,  347,  345,  361,  341,  339,  338,
      337,  336,  335,  334,  333,  332,   41,   41,   41,  330,
      343,  329,  328,  327,  326,  325,  324,  323,  322,  321,

      320,  319,  317,  316,  315,  314,  311,  310,  309,  308,
      306,  305,   41,   41,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  294,  293,  292,  291,  290,  288,   42,   42,   42,
      287,  281,  276,  274,  273,  271,  261,  257,  254,  253,
      251,  249,  248,  247,  246,  244,  243,  242,  241,  240,
      239,  238,  237,   42,   42,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  440,  440,  236,  228,  227,  440,  440,  440,  226,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  222,  440,  441,  219,  207,  441,  441,  441,
      197,  179,  172,  441,  441,  441,  441,  442,  167,  166,
      156,  148,  442,  442,  442,  145,  442,  442,  442,  134,
      442,  442,  442,  442,  442,  128,  442,  443,  443,  125,
      443,  443,  443,  121,  443,  443,  443,  443,  443,  443,
      443,  120,  443,  443,  443,  443,  443,  443,  443,  443,
      444,  444,  114,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  113,  444,  444,  444,  444,  444,
      444,  444,  444,  445,  112,  103,  445,  445,  445,   98,
       95,   94,  445,  445,  445,  445,  446,  446,   91,  446,

      446,   90,  446,  446,   89,  446,  446,  446,  446,  446,
      446,  446,  446,   88,   87,  446,  446,  446,  446,  447,
      447,   84,  447,  447,   75,  447,   67,    0,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  448,    0,    0,    0,    0,  448,  448,  448,
        0,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,    0,    0,  448,  449,  449,    0,  449,  449,    0,
      449,    0,    0,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  450,    0,    0,
      450,  450,  450,    0,    0,    0,  450,  450,  450,  450,

      451,  451,    0,  451,  451,  451,  451,  451,    0,  451,
        0,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  452,  452,    0,  452,  452,  452,  452,
        0,    0,  452,  452,  452,  452,  452,  452,    0,  452,
        0,  452,  452,  452,  452,  452,  453,  453,    0,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  454,  454,
        0,  454,  454,  454,  454,  454,  454,  454,  454,    0,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  455,  455,  455,    0,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,    0,  455,  455,
      455,  455,  455,  455,  456,  456,  456,  456,    0,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
        0,  456,  456,  456,  456,  456,  456,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./scan.ll"
/* -*-fundamental-*- */
/* $Id: scan.ll 3587 2008-09-12 20:48:31Z max $ */
/*
 *
 * Copyright (C) 2005 Max Krohn (my last name AT mit DOT edu)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 *
 */
#line 26 "./scan.ll"
#define YYSTYPE YYSTYPE
#include "tame.h"
#include "parse.h"

#define YY_NO_UNPUT
#define YY_SKIP_YYWRAP
#define yywrap() 1

str filename = "(stdin)";
int lineno = 1;
static void switch_to_state (int i);
static int std_ret (int i);
static int tame_ret (int s, int t);
int get_yy_lineno () { return lineno ;}
str get_yy_loc ();
int tame_on = 1;
int gobble_flag =0;
int lineno_return ();
int loc_return ();
int filename_return ();

#define GOBBLE_RET if (!gobble_flag) return std_ret (T_PASSTHROUGH)
 









#line 1004 "lex.yy.c"

#define INITIAL 0
#define FULL_PARSE 1
#define FN_ENTER 2
#define VARS_ENTER 3
#define TAME_BASE 4
#define C_COMMENT 5
#define CXX_COMMENT 6
#define TAME 7
#define ID_OR_NUM 8
#define NUM_ONLY 9
#define HALF_PARSE 10
#define PP 11
#define PP_BASE 12
#define JOIN_LIST 13
#define JOIN_LIST_BASE 14
#define TWAIT_ENTER 15
#define TWAIT_BODY 16
#define TWAIT_BODY_BASE 17
#define EXPR_LIST 18
#define EXPR_LIST_BASE 19
#define ID_LIST 20
#define RETURN_PARAMS 21
#define EXPR_LIST_BR 22
#define EXPR_LIST_BR_BASE 23
#define DEFRET_ENTER 24
#define DEFRET_BASE 25
#define DEFRET 26
#define TEMPLATE_ENTER 27
#define TEMPLATE 28
#define TEMPLATE_BASE 29
#define SIG_PARSE 30
#define QUOTE 31
#define SQUOTE 32

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 69 "./scan.ll"


#line 1231 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 418 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1538 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 72 "./scan.ll"
++lineno;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 73 "./scan.ll"
/*discard*/;
	YY_BREAK


case 3:
YY_RULE_SETUP
#line 77 "./scan.ll"
{ yy_pop_state (); return std_ret (T_ID); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 78 "./scan.ll"
{ yy_pop_state (); return std_ret (T_NUM); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 79 "./scan.ll"
{ return yyerror ("expected an identifier or a number"); }
	YY_BREAK



case 6:
YY_RULE_SETUP
#line 84 "./scan.ll"
{ yy_pop_state (); return std_ret (T_NUM); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 85 "./scan.ll"
{ return yyerror ("expected a number"); }
	YY_BREAK


case 8:
YY_RULE_SETUP
#line 90 "./scan.ll"
return T_CONST;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 91 "./scan.ll"
return T_STRUCT;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 92 "./scan.ll"
return T_TYPENAME;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 93 "./scan.ll"
return T_VOID;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 94 "./scan.ll"
return T_CHAR;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 95 "./scan.ll"
return T_SHORT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 96 "./scan.ll"
return T_INT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 97 "./scan.ll"
return T_LONG_LONG;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 98 "./scan.ll"
return T_LONG;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 99 "./scan.ll"
return T_FLOAT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 100 "./scan.ll"
return T_DOUBLE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 101 "./scan.ll"
return T_SIGNED;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 102 "./scan.ll"
return T_UNSIGNED;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 103 "./scan.ll"
return T_STATIC;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 104 "./scan.ll"
return T_HOLDVAR;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 105 "./scan.ll"
{ yy_push_state (TEMPLATE_ENTER); return T_TEMPLATE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 107 "./scan.ll"
{ return std_ret (T_ID); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 108 "./scan.ll"
{ return std_ret (T_NUM); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 112 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 113 "./scan.ll"
{ return T_2COLON; }
	YY_BREAK


case 29:
YY_RULE_SETUP
#line 117 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 30:
YY_RULE_SETUP
#line 121 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "./scan.ll"
{ switch_to_state (TAME_BASE); return yytext[0]; }
	YY_BREAK


case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 126 "./scan.ll"
++lineno;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 127 "./scan.ll"
/* discard */ ;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 128 "./scan.ll"
{ switch_to_state (TEMPLATE_BASE); return yytext[0]; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 129 "./scan.ll"
{ return yyerror ("unexpected token after 'template'"); }
	YY_BREAK


case 36:
YY_RULE_SETUP
#line 133 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 137 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 138 "./scan.ll"
{ yy_push_state (TEMPLATE); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 139 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 40:
YY_RULE_SETUP
#line 143 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 41:
YY_RULE_SETUP
#line 147 "./scan.ll"
{ yy_push_state (PP_BASE); return yytext[0]; }
	YY_BREAK


case 42:
YY_RULE_SETUP
#line 151 "./scan.ll"
{ yy_push_state (FULL_PARSE); return yytext[0]; }
	YY_BREAK


case 43:
YY_RULE_SETUP
#line 155 "./scan.ll"
{ return yyerror ("illegal token found in parsed "
				  "environment"); }
	YY_BREAK


case 44:
YY_RULE_SETUP
#line 160 "./scan.ll"
{ yy_push_state (FULL_PARSE); return yytext[0]; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 161 "./scan.ll"
{ switch_to_state (TAME_BASE); return yytext[0]; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 162 "./scan.ll"
{ return yyerror ("illegal token found in function "
				  "environment"); }
	YY_BREAK


case 47:
YY_RULE_SETUP
#line 167 "./scan.ll"
{ yy_pop_state (); return yytext[0]; } 
	YY_BREAK


case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 171 "./scan.ll"
{ ++lineno; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 172 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 173 "./scan.ll"
{ yy_push_state (PP); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 51:
YY_RULE_SETUP
#line 177 "./scan.ll"
{ return lineno_return (); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 178 "./scan.ll"
{ return filename_return (); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 179 "./scan.ll"
{ return loc_return (); }
	YY_BREAK


case 54:
YY_RULE_SETUP
#line 183 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 55:
YY_RULE_SETUP
#line 188 "./scan.ll"
{ switch_to_state (HALF_PARSE); return yytext[0]; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 189 "./scan.ll"
{ return yyerror ("illegal token found between VARS and '{'");}
	YY_BREAK


case 57:
YY_RULE_SETUP
#line 194 "./scan.ll"
{ yy_push_state (JOIN_LIST_BASE); return yytext[0]; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 195 "./scan.ll"
{ switch_to_state (TWAIT_BODY_BASE); return yytext[0]; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 196 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 197 "./scan.ll"
{ return yyerror ("illegal token found after twait"); }
	YY_BREAK


case 61:
YY_RULE_SETUP
#line 202 "./scan.ll"
{ yy_push_state (JOIN_LIST); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 203 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 63:
YY_RULE_SETUP
#line 207 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 208 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 65:
YY_RULE_SETUP
#line 212 "./scan.ll"
{ switch_to_state (ID_LIST); return yytext[0]; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 213 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 67:
YY_RULE_SETUP
#line 217 "./scan.ll"
{ switch_to_state (DEFRET_BASE); return yytext[0]; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 218 "./scan.ll"
{ return yyerror ("Expected '{' after DEFAULT_RETURN"); }
	YY_BREAK


case 69:
YY_RULE_SETUP
#line 222 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 223 "./scan.ll"
{ yy_push_state (DEFRET); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 71:
YY_RULE_SETUP
#line 227 "./scan.ll"
{ yy_push_state (DEFRET); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 228 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 232 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 233 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 75:
YY_RULE_SETUP
#line 237 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 238 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK


case 77:
YY_RULE_SETUP
#line 242 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 243 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 79:
YY_RULE_SETUP
#line 247 "./scan.ll"
{ yy_push_state (EXPR_LIST_BR); 
	             return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 249 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 250 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 82:
YY_RULE_SETUP
#line 254 "./scan.ll"
{ return std_ret (T_ID); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 255 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 256 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 85:
YY_RULE_SETUP
#line 260 "./scan.ll"
{ yy_push_state (EXPR_LIST); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 261 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 87:
YY_RULE_SETUP
#line 265 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 266 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 89:
YY_RULE_SETUP
#line 270 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 271 "./scan.ll"
{ return yytext[0]; }
	YY_BREAK


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 275 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 276 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 277 "./scan.ll"
{ yy_push_state (TWAIT_BODY); 
			  return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 94:
/* rule 94 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 279 "./scan.ll"
{ return yyerror ("cannot goto within twait{..}"); }
	YY_BREAK
case 95:
/* rule 95 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 280 "./scan.ll"
{ return yyerror ("cannot return withint twait{..}"); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 281 "./scan.ll"
{ yy_push_state (QUOTE); 
                          return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 283 "./scan.ll"
{ yy_push_state (SQUOTE); 
                          return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 98:
YY_RULE_SETUP
#line 288 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 99:
YY_RULE_SETUP
#line 292 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 296 "./scan.ll"
{ yylval.str = yytext; ++lineno; return T_PASSTHROUGH; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 298 "./scan.ll"
{ yylval.str = yytext; return T_PASSTHROUGH; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 300 "./scan.ll"
{ yylval.str = yytext; yy_push_state (TAME); 
		  return T_PASSTHROUGH; }
	YY_BREAK
case 103:
/* rule 103 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 303 "./scan.ll"
{ return tame_ret (VARS_ENTER, T_VARS); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 304 "./scan.ll"
{ return tame_ret (DEFRET_ENTER, T_DEFAULT_RETURN); }
	YY_BREAK
case 105:
/* rule 105 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 306 "./scan.ll"
{ yy_push_state (RETURN_PARAMS); return T_RETURN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 308 "./scan.ll"
{ yy_push_state (QUOTE);  return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 309 "./scan.ll"
{ yy_push_state (SQUOTE); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 108:
/* rule 108 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 313 "./scan.ll"
{ return tame_ret (TWAIT_ENTER, T_TWAIT); }
	YY_BREAK


case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 317 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 318 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 319 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 323 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 324 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 325 "./scan.ll"
{ yy_pop_state (); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 115:
YY_RULE_SETUP
#line 329 "./scan.ll"
{ yylval.str = yytext; yy_pop_state ();
	    	  return T_PASSTHROUGH; }
	YY_BREAK


case 116:
YY_RULE_SETUP
#line 334 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK


case 117:
YY_RULE_SETUP
#line 339 "./scan.ll"
{ yy_push_state (CXX_COMMENT); gobble_flag = 0;
	          return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 341 "./scan.ll"
{ yy_push_state (C_COMMENT); gobble_flag = 0;
	          return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 119:
/* rule 119 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 346 "./scan.ll"
{ return tame_ret (SIG_PARSE, T_TAMED); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 347 "./scan.ll"
{ yylval.str = yytext; return T_PASSTHROUGH ; }
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 348 "./scan.ll"
{ ++lineno; yylval.str = yytext; return T_PASSTHROUGH; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 349 "./scan.ll"
{ yy_push_state (QUOTE); return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 350 "./scan.ll"
{ yy_push_state (SQUOTE); return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 354 "./scan.ll"
{ ++lineno; yy_pop_state (); GOBBLE_RET; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 355 "./scan.ll"
{ yy_push_state (CXX_COMMENT); gobble_flag = 0;
	          return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 357 "./scan.ll"
{ yy_push_state (C_COMMENT); gobble_flag = 0;
	          return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 359 "./scan.ll"
{ GOBBLE_RET; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 360 "./scan.ll"
{ tame_on = 0; GOBBLE_RET; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 361 "./scan.ll"
{ tame_on = 1; GOBBLE_RET; }
	YY_BREAK


case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 365 "./scan.ll"
{ ++lineno; return std_ret (T_PASSTHROUGH); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 366 "./scan.ll"
{ yy_pop_state (); return yytext[0]; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 367 "./scan.ll"
{ return std_ret (T_PASSTHROUGH); }
	YY_BREAK


case 133:
YY_RULE_SETUP
#line 371 "./scan.ll"
{ tame_on = 0; GOBBLE_RET; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 372 "./scan.ll"
{ tame_on = 1; GOBBLE_RET; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 373 "./scan.ll"
{ yy_pop_state (); GOBBLE_RET; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 374 "./scan.ll"
{ GOBBLE_RET; }
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 375 "./scan.ll"
{ ++lineno; yylval.str = yytext; GOBBLE_RET; }
	YY_BREAK


case 138:
YY_RULE_SETUP
#line 381 "./scan.ll"
{ gobble_flag = 1; yy_push_state (CXX_COMMENT); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 382 "./scan.ll"
{ gobble_flag = 1; yy_push_state (C_COMMENT); }
	YY_BREAK

case 140:
YY_RULE_SETUP
#line 386 "./scan.ll"
ECHO;
	YY_BREAK
#line 2162 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FULL_PARSE):
case YY_STATE_EOF(FN_ENTER):
case YY_STATE_EOF(VARS_ENTER):
case YY_STATE_EOF(TAME_BASE):
case YY_STATE_EOF(C_COMMENT):
case YY_STATE_EOF(CXX_COMMENT):
case YY_STATE_EOF(TAME):
case YY_STATE_EOF(ID_OR_NUM):
case YY_STATE_EOF(NUM_ONLY):
case YY_STATE_EOF(HALF_PARSE):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PP_BASE):
case YY_STATE_EOF(JOIN_LIST):
case YY_STATE_EOF(JOIN_LIST_BASE):
case YY_STATE_EOF(TWAIT_ENTER):
case YY_STATE_EOF(TWAIT_BODY):
case YY_STATE_EOF(TWAIT_BODY_BASE):
case YY_STATE_EOF(EXPR_LIST):
case YY_STATE_EOF(EXPR_LIST_BASE):
case YY_STATE_EOF(ID_LIST):
case YY_STATE_EOF(RETURN_PARAMS):
case YY_STATE_EOF(EXPR_LIST_BR):
case YY_STATE_EOF(EXPR_LIST_BR_BASE):
case YY_STATE_EOF(DEFRET_ENTER):
case YY_STATE_EOF(DEFRET_BASE):
case YY_STATE_EOF(DEFRET):
case YY_STATE_EOF(TEMPLATE_ENTER):
case YY_STATE_EOF(TEMPLATE):
case YY_STATE_EOF(TEMPLATE_BASE):
case YY_STATE_EOF(SIG_PARSE):
case YY_STATE_EOF(QUOTE):
case YY_STATE_EOF(SQUOTE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 418 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 418 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 417);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 386 "./scan.ll"



void
switch_to_state (int s)
{
	yy_pop_state ();
	yy_push_state (s);
}

int
yyerror (str msg)
{
  warnx << filename << ":" << lineno << ": " << msg << "\n";
  exit (1);
}

int
yywarn (str msg)
{
  warnx << filename << ":" << lineno << ": Warning: " << msg << "\n";
  return 0;
}

int
std_ret (int i)
{
  yylval.str = yytext;
  return i;
}

void
gcc_hack_use_static_functions ()
{
  assert (false);
  (void )yy_top_state ();
}

int
tame_ret (int s, int t)
{
  if (tame_on) {
    yy_push_state (s);
    return t;
  } else {
    return std_ret (T_PASSTHROUGH);
  }
}

str
get_yy_loc ()
{
   strbuf b (filename);
   b << ":" << lineno;
   return b;
}

int
lineno_return ()
{
   strbuf b; 
   b << lineno; 
   yylval.str = lstr (lineno, str (b));
   return T_PASSTHROUGH;
}

int
filename_return ()
{
  strbuf b; 
  b << "\"" << filename << "\"";
  yylval.str = lstr (lineno, str (b));
  return T_PASSTHROUGH; 
}

int
loc_return ()
{
   strbuf b ("\"%s:%d\"", filename.cstr (), lineno);
  yylval.str = lstr (lineno, str (b));
  return T_PASSTHROUGH; 
}

